// ======================================
// Hiring Management App Prisma Schema 
// ======================================

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================================
// ENUMS (Enhanced)
// ======================================

enum UserRole {
  RECRUITER
  APPLICANT
  ADMIN        // Added for future scalability
}

enum JobStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED     // Added for better job lifecycle
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  SHORTLISTED
  REJECTED
  ACCEPTED
  WITHDRAWN    // Added for candidate-initiated withdrawals
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}


// ======================================
// AUTH MODELS 
// ======================================

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   // email address
  token      String   @unique
  expires    DateTime

  @@map("verification_tokens")
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@map("password_reset_tokens")
}

// ======================================
// USER MODELS 
// ======================================

model User {
  id          String   @id @default(uuid()) @db.Uuid
  email       String   @unique
  password    String
  fullName    String
  role        UserRole @default(APPLICANT)
  isVerified  Boolean  @default(false)  // Added email verification
  lastLoginAt DateTime?                 // Added for analytics
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobs        Job[]         @relation("JobAuthor")
  profile     Profile?
  
  @@map("users")
  @@index([email])
  @@index([createdAt])
  ApplicationNote ApplicationNote[]
}

model Profile {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @unique @db.Uuid
  bio          String?  
  phone        String?
  location     String?
  avatarUrl    String?  @map("avatar_url")
  resumeUrl    String?  @map("resume_url")
  portfolioUrl String?  @map("portfolio_url")
  companyName  String?  @map("company_name")
  website      String?
  linkedinUrl  String?  @map("linkedin_url")  // Added professional social
  githubUrl    String?  @map("github_url")    // Added for developers
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations (Fixed)
  user        User       @relation(fields: [userId], references: [id])
  applications Candidate[]
  userInfo     OtherUserInfo[]

  @@map("profiles")
}

model OtherUserInfo {
  id               String   @id @default(uuid()) @db.Uuid
  profileId        String   @db.Uuid
  fieldId          String   @db.Uuid
  infoFieldAnswer  String   // Consider @db.Text for longer responses
  
  profile Profile @relation(fields: [profileId], references: [id])
  field   InfoField @relation(fields: [fieldId], references: [id])
  
  @@unique([fieldId, profileId])  // Fixed: One answer per field per profile
  @@map("other_user_info")
}

model InfoField {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  key          String   // e.g., "years_experience", "skills"
  label        String?
  value        String?  // Default value
  displayOrder Int?     @default(0)
  fieldType    String?  @default("text") // Added: "text", "select", "textarea"
  options      String?  // JSON string for select options
  
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations (Fixed)
  applicationFields AppFormField[]
  userAnswers      OtherUserInfo[]
  
  @@index([userId, key])
  @@map("info_fields")
}

// ======================================
// JOB MANAGEMENT (Enhanced)
// ======================================

model Job {
  id              String          @id @default(uuid()) @db.Uuid
  slug            String          @unique
  recruiterId     String          @map("recruiter_id") @db.Uuid
  title           String
  description     String?         @db.Text  // Changed to Text for longer content
  companyName     String
  department      String?
  location        String?
  remotePolicy    String?         @default("onsite") // Added: "remote", "hybrid", "onsite"
  salaryMin       Decimal?        @map("salary_min") @db.Decimal(12, 2)  // Increased precision
  salaryMax       Decimal?        @map("salary_max") @db.Decimal(12, 2)
  salaryCurrency  String?         @default("IDR")
  salaryDisplay   String?
  employmentType  EmploymentType? @default(FULL_TIME)
  status          JobStatus       @default(DRAFT)  // Fixed: Using enum
  experienceLevel String?         // Added: "entry", "mid", "senior", "executive"
  educationLevel  String?         // Added: "high_school", "bachelor", "master", "phd"
  
  // Metadata
  viewsCount      Int             @default(0)      // Added for popularity tracking
  applicationsCount Int           @default(0)      // Added for quick stats
  expiresAt       DateTime?       @map("expires_at") // Added job expiration
  
  // Display fields (consider moving to computed fields in application layer)
  listBadge       String?
  startedOnText   String?
  ctaText         String?
  
  // Timestamps
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  publishedAt     DateTime?       @map("published_at") // Added for job lifecycle
  
  // Relations
  authorId        String   @db.Uuid 
  author          User     @relation("JobAuthor", fields: [authorId], references: [id])
  
  config          JobConfig?
  candidates      Candidate[]
  applicationFormFields AppFormField[]

  @@index([recruiterId])
  @@index([status])
  @@index([createdAt])
  @@index([employmentType])
  @@map("jobs")
}

// ======================================
// JOB CONFIGURATION (Enhanced)
// ======================================

model JobConfig {
  id           String   @id @default(uuid()) @db.Uuid
  jobId        String   @unique @db.Uuid
  job          Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  sections     Json     // Enhanced: {title, description, fields: [{key, type, validation, options}]}
  settings     Json?    // Added: {autoReject: boolean, requireCoverLetter: boolean, etc.}
  requirements Json?    // Added: {minExperience, skills, education, etc.}
  
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  @@map("job_configs")
}

// ======================================
// APPLICATION FORM
// ======================================

model AppFormField {
  id         String      @id @default(uuid()) @db.Uuid
  jobId      String      @db.Uuid
  fieldId    String      @db.Uuid
  fieldState String      @default("optional") // "mandatory", "optional", "off"
  sortOrder  Int?        @default(0)          // Added for field ordering
  updatedAt  DateTime    @updatedAt @map("updated_at")

  // Relations (Fixed)
  job       Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  field     InfoField @relation(fields: [fieldId], references: [id])
  
  @@unique([jobId, fieldId])  // One config per field per job
  @@index([jobId])
  @@index([fieldId])
  @@map("application_form_fields")
}

// ======================================
// CANDIDATES & APPLICATIONS (Enhanced)
// ======================================

model Candidate {
  id           String            @id @default(uuid()) @db.Uuid
  jobId        String            @db.Uuid
  jobSeekerId  String            @db.Uuid
  status       ApplicationStatus @default(PENDING)
  
  // Application content
  coverLetter  String?           @db.Text    // Added cover letter support
  source       String?           @default("direct") // "referral", "linkedin", etc.
  
  // Timestamps
  appliedAt    DateTime          @default(now()) @map("applied_at")
  viewedAt     DateTime?         @map("viewed_at")     // When recruiter first viewed
  statusUpdatedAt DateTime?      @map("status_updated_at")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  // Relations
  job         Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobSeeker   Profile @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  
  // New relations for enhanced tracking
  notes       ApplicationNote[]
  interviews  Interview[]

  @@unique([jobId, jobSeekerId])
  @@index([jobId])
  @@index([jobSeekerId])
  @@index([status])
  @@index([appliedAt])
  @@map("applications")
}

// ======================================
// ADDITIONAL MODELS (Recommended)
// ======================================

model ApplicationNote {
  id           String   @id @default(uuid()) @db.Uuid
  applicationId String  @db.Uuid
  authorId     String   @db.Uuid
  content      String   @db.Text
  isInternal   Boolean  @default(true)  // Internal notes vs candidate-facing
  
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  application Candidate @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  author      User      @relation(fields: [authorId], references: [id])
  
  @@index([applicationId])
  @@map("application_notes")
}

model Interview {
  id             String   @id @default(uuid()) @db.Uuid
  applicationId  String   @db.Uuid
  scheduledAt    DateTime @map("scheduled_at")
  duration       Int?     @default(60)  // Duration in minutes
  interviewType  String   @default("virtual") // "in_person", "phone", "virtual"
  meetingUrl     String?
  location       String?
  status         String   @default("scheduled") // "scheduled", "completed", "cancelled"
  notes          String?  @db.Text
  
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  application    Candidate @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  
  @@index([applicationId])
  @@index([scheduledAt])
  @@map("interviews")
}